{"version":3,"sources":["components/tickerForm.tsx","components/tradeOrderForm.tsx","API_tw.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TickerForm","text","tickers","onDoneCallback","className","onClick","map","ticker","name","email","id","TradeOrderForm","placeOrder","useState","curOrder","setCurOrder","handleOrderData","e","currentTarget","value","onSubmit","preventDefault","undefined","order1","newOrder","ticker_id","trader_id","Number","side","price_limit","quantity","type","placeholder","onChange","disabled","dburl","fetchTickers","a","endpoint","axios","get","headers","response","data","postTradeOrder","ord","post","App","loading","setLoading","startOrder","setStartOrder","gameOver","setGameOver","tikers","setTickers","console","log","startTrade","startTradeOrder","resp","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.90ed0d5a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./tickerForm.css\";\nimport { ITicker } from \"../db/datamodel\";\n\ninterface Props {\n  text: string;\n  tickers: ITicker[];\n  onDoneCallback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n}\nexport const TickerForm: React.FC<Props> = ({\n  text,\n  tickers,\n  onDoneCallback,\n}) => {\n  return (\n    <div className=\"trader\">\n      <h1>{text}</h1>\n      <button onClick={onDoneCallback}>Close</button>\n      {tickers.map((ticker: ITicker) => (\n        <li key={ticker.id}>\n          <label>{\"Name:\"}</label>\n          <label>{ticker.name}</label>\n          <label>{\";Email:\"}</label>\n          <label>{ticker.email}</label>\n        </li>\n      ))}\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { ITradeOrder } from \"../db/datamodel\";\n\ninterface Props {\n  placeOrder: (newOrder: ITradeOrder | any) => void;\n}\n\nexport interface IOrderTemplate {\n  ticker_id: string;\n  trader_id: string;\n  side: string;\n  price_limit: string;\n  quantity: string;\n}\n\nexport const TradeOrderForm: React.FC<Props> = ({ placeOrder }) => {\n  // const [tickerId, setTicketId] = useState(\"\");\n  // const [traderId, setTraderId] = useState(0);\n  // const [side, setSide] = useState(\"buy\");\n  // const [priceLimit, setPriceLimit] = useState(0);\n  // const [quatity, setQuantity] = useState(0);\n\n  const [curOrder, setCurOrder] = useState<IOrderTemplate | {}>();\n  const handleOrderData = (e: React.FormEvent<HTMLInputElement>) => {\n    setCurOrder({\n      ...curOrder,\n      [e.currentTarget.id]: e.currentTarget.value,\n    });\n  };\n  const addNewOrder = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (curOrder !== undefined) {\n      let order1 = curOrder as IOrderTemplate;\n      let newOrder: ITradeOrder = {\n        ticker_id: order1.ticker_id,\n        trader_id: Number(order1.trader_id),\n        side: order1.side,\n        price_limit: Number(order1.price_limit),\n        quantity: Number(order1.quantity),\n      };\n      placeOrder(newOrder);\n    }\n  };\n  return (\n    <div>\n      <form onSubmit={addNewOrder}>\n        <input\n          type=\"text\"\n          id=\"ticker_id\"\n          placeholder=\"ticker_id\"\n          onChange={handleOrderData}\n        />\n        <input\n          type=\"number\"\n          id=\"trader_id\"\n          placeholder=\"trader_id\"\n          onChange={handleOrderData}\n        />\n        <input\n          type=\"text\"\n          id=\"side\"\n          placeholder=\"side\"\n          onChange={handleOrderData}\n        />\n        <input\n          type=\"text\"\n          id=\"price_limit\"\n          placeholder=\"price_limit\"\n          onChange={handleOrderData}\n        />\n        <input\n          type=\"number\"\n          id=\"quantity\"\n          placeholder=\"quantity\"\n          onChange={handleOrderData}\n        />\n        <button disabled={curOrder === undefined ? true : false}>\n          Place Order\n        </button>\n      </form>\n    </div>\n  );\n};\n","import axios from \"axios\";\nimport { ITicker, ITradeOrder, ITrader, ITrade } from \"./db/datamodel\";\n\nconst dburl = `http://localhost:3001/`;\n\nexport const fetchTickers = async (): Promise<ITicker[]> => {\n  let endpoint = `${dburl}tickers`;\n  // if (tickerId !== undefined) {\n  //   endpoint += tickerId;\n  // }\n\n  const response = await axios.get<ITicker[]>(endpoint, {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n  const tickers: ITicker[] = response.data;\n  return tickers;\n};\n\nexport const fetchTraders = async (): Promise<ITrader[]> => {\n  let endpoint = `${dburl}traders`;\n\n  const response = await axios.get<ITrader[]>(endpoint, {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n  return response.data as ITrader[];\n};\n\nexport const fetchTradeOrders = async (): Promise<ITradeOrder[]> => {\n  let endpoint = `${dburl}orders`;\n\n  const response = await axios.get<ITradeOrder[]>(endpoint, {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n  return response.data as ITradeOrder[];\n};\n\nexport const postTradeOrder = async (\n  ord: ITradeOrder\n): Promise<ITradeOrder> => {\n  let endpoint = `${dburl}orders`;\n  const response = await axios.post<ITradeOrder>(endpoint, ord, {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n  return response.data as ITradeOrder;\n};\n\nexport const fetchTrades = async (): Promise<ITrade[]> => {\n  let endpoint = `${dburl}trades`;\n\n  const response = await axios.get<ITrade[]>(endpoint, {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n  return response.data as ITrade[];\n};\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { TickerForm } from \"./components/tickerForm\";\nimport { TradeOrderForm } from \"./components/tradeOrderForm\";\n\nimport { fetchTickers, postTradeOrder } from \"./API_tw\";\n// styles\n// import { GlobalStyle } from \"./App.styles\";\nimport { ITicker, ITradeOrder } from \"./db/datamodel\";\n\nconst App: React.FC = () => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [startOrder, setStartOrder] = useState<boolean>(false);\n  const [gameOver, setGameOver] = useState<boolean>(true);\n  const [tikers, setTickers] = useState<ITicker[]>([]);\n\n  console.log(\"tickers: \", tikers);\n  const startTrade = async () => {\n    setLoading(true);\n    setGameOver(false);\n    const response = await fetchTickers();\n    setTickers(response);\n    setLoading(false);\n  };\n\n  const startTradeOrder = async () => {\n    setStartOrder(true);\n    setGameOver(false);\n  };\n\n  const placeOrder = async (ord: ITradeOrder) => {\n    setStartOrder(false);\n    // let ord: ITradeOrder = {\n    //   ticker_id: \"GOOG\",\n    //   trader_id: 1,\n    //   side: \"sell\",\n    //   price_limit: 100.4,\n    //   quantity: 350,\n    // };\n    const resp = await postTradeOrder(ord);\n    console.log(\"New Order placed=>\", resp);\n    setGameOver(true);\n  };\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      setGameOver(true);\n    }\n  };\n  return (\n    <>\n      <div className=\"App\">\n        <h1>Start Trade</h1>\n        {gameOver ? (\n          <button className=\"start\" onClick={startTrade}>\n            Show all tickers\n          </button>\n        ) : null}\n        {/* {gameOver ? (\n          <button className=\"placeorder\" onClick={placeOrder}>\n            Place Order\n          </button>\n        ) : null} */}\n        {gameOver ? (\n          <button className=\"placeorder\" onClick={startTradeOrder}>\n            Place Order\n          </button>\n        ) : null}\n\n        {loading && <p>Loading Trade information ...</p>}\n        {!loading && !gameOver ? (\n          <TickerForm\n            text=\"Tickers\"\n            tickers={tikers}\n            onDoneCallback={checkAnswer}\n          ></TickerForm>\n        ) : null}\n        {startOrder && !gameOver ? (\n          <TradeOrderForm placeOrder={placeOrder}></TradeOrderForm>\n        ) : null}\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}